{"version":3,"sources":["webpack:///./src/pages/poc/index.tsx"],"names":["Statement","loadable","fallback","POC","currentLocationURL","useState","click","setClick","useEffect","document","location","href","applicationLdJson","WEBSITE_PAGE_META","author","image","src","description","Fragment","defer","lang","rel","favicon","http-equiv","content","name","twitter","site","creator","alt","type","JSON","stringify","onClick"],"mappings":"uHAAA,6EAOMA,EAAYC,YAAS,CAAD,sKAAC,kBAAM,yDAAP,sPAAuD,CAAEC,SAAU,OAEvFC,EAAM,WAEV,IAEIC,EAA6B,OAJJ,EAMHC,oBAAS,GAA5BC,EANsB,KAMfC,EANe,KAO7BC,qBAAU,WACRJ,EAAqBK,SAASC,SAASC,KACvCJ,GAAS,KACR,IAEH,IAAMK,EAAwC,CAC5C,WAAY,qBACZ,QAAS,UACT,IAAOR,EACP,KAdwB,MAexB,OAAUS,IAAkBC,OAC5B,MAASD,IAAkBE,MAAMC,IACjC,YAAeH,IAAkBI,aAGnC,OACE,kBAAC,IAAMC,SAAP,KAEE,kBAAC,SAAD,CAAQC,OAAO,GACb,0BAAMC,KAAK,OAEX,+BA1BoB,OA4BpB,0BAAMC,IAAI,gBAAgBV,KAAME,IAAkBS,UAClD,0BAAMD,IAAI,mBAAmBV,KAAME,IAAkBS,UAErD,0BAAMC,aAAW,kBAAkBC,QAAQ,YAC3C,0BAAMC,KAAK,SAASD,QAAQ,UAC5B,0BAAMC,KAAK,SAASD,QAASX,IAAkBC,SAC/C,0BAAMW,KAAK,cAAcD,QAASX,IAAkBI,cACpD,0BAAMI,IAAI,YAAYV,KAAMP,IAE5B,0BAAMqB,KAAK,eAAeD,QAAQ,YAClC,0BAAMC,KAAK,eAAeD,QAASX,IAAkBa,QAAQC,OAC7D,0BAAMF,KAAK,gBAAgBD,QAvCP,QAwCpB,0BAAMC,KAAK,sBAAsBD,QAASX,IAAkBI,cAC5D,0BAAMQ,KAAK,kBAAkBD,QAASX,IAAkBa,QAAQE,UAChE,0BAAMH,KAAK,gBAAgBD,QAASX,IAAkBE,MAAMC,MAC5D,0BAAMS,KAAK,oBAAoBD,QAASX,IAAkBE,MAAMc,MAEhE,0BAAMJ,KAAK,SAASD,QAASpB,IAC7B,0BAAMqB,KAAK,UAAUD,QAAQ,YAC7B,0BAAMC,KAAK,WAAWD,QA/CF,QAgDpB,0BAAMC,KAAK,WAAWD,QAASX,IAAkBE,MAAMC,MACvD,0BAAMS,KAAK,iBAAiBD,QAASX,IAAkBI,cAEvD,4BAAQa,KAAK,uBAAuBC,KAAKC,UAAUpB,KAErD,6BACE,6CACA,gEACA,4BAAQqB,QAAS,kBAAM1B,GAAUD,KAAjC,aAIDA,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,KACxBM,EAAQ,kBAACN,EAAD,MAAgB,OAKhBG","file":"component---src-pages-poc-index-tsx-344b6f0fe96097d2a5a0.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport loadable from '@loadable/component';\n\nimport WEBSITE_PAGE_META from '../../common/Website/page_meta';\nimport IApplicationLdJSON from '../../common/Contract/IApplicationLdJSON';\n\nconst Statement = loadable(() => import('../../components/Statement/Statement'), { fallback: null });\n\nconst POC = (): JSX.Element => {\n\n  const pageTitle: string = 'POC';\n  \n  let currentLocationURL: string = '/poc';\n\n  const [click, setClick] = useState(false);\n  useEffect(() => {\n    currentLocationURL = document.location.href;\n    setClick(true);\n  }, []);\n\n  const applicationLdJson: IApplicationLdJSON = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"website\",\n    \"url\": currentLocationURL,\n    \"name\": pageTitle,\n    \"author\": WEBSITE_PAGE_META.author,\n    \"image\": WEBSITE_PAGE_META.image.src,\n    \"description\": WEBSITE_PAGE_META.description\n  };\n  \n  return (\n    <React.Fragment>\n      \n      <Helmet defer={false}>\n        <html lang=\"en\" />\n        \n        <title>{pageTitle}</title>\n\n        <link rel=\"shortcut icon\" href={WEBSITE_PAGE_META.favicon} />  \n        <link rel=\"apple-touch-icon\" href={WEBSITE_PAGE_META.favicon} />\n\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"robots\" content=\"index\" />\n        <meta name=\"author\" content={WEBSITE_PAGE_META.author} />\n        <meta name=\"description\" content={WEBSITE_PAGE_META.description} />\n        <link rel=\"canonical\" href={currentLocationURL} />\n\n        <meta name=\"twitter:card\" content=\"summary\" />\n        <meta name=\"twitter:site\" content={WEBSITE_PAGE_META.twitter.site} />\n        <meta name=\"twitter:title\" content={pageTitle} />\n        <meta name=\"twitter:description\" content={WEBSITE_PAGE_META.description} />\n        <meta name=\"twitter:creator\" content={WEBSITE_PAGE_META.twitter.creator} />\n        <meta name=\"twitter:image\" content={WEBSITE_PAGE_META.image.src} />\n        <meta name=\"twitter:image:alt\" content={WEBSITE_PAGE_META.image.alt} />\n\n        <meta name=\"og:url\" content={currentLocationURL} />\n        <meta name=\"og:type\" content=\"website\" />\n        <meta name=\"og:title\" content={pageTitle} />\n        <meta name=\"og:image\" content={WEBSITE_PAGE_META.image.src} />\n        <meta name=\"og:description\" content={WEBSITE_PAGE_META.description} />\n\n        <script type=\"application/ld+json\">{JSON.stringify(applicationLdJson)}</script>\n      </Helmet>\n      <div>\n        <h1>Hello, World!</h1>\n        <p>Welcome to the world of warcraft.</p>\n        <button onClick={() => setClick(!click)}>\n          Click me\n        </button>\n      </div>\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n      {click ? <Statement /> : null}\n    </React.Fragment>\n  );\n}\n\nexport default POC;\n"],"sourceRoot":""}