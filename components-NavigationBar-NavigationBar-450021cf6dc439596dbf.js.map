{"version":3,"sources":["webpack:///./src/components/NavigationBar/NavigationBar.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["NavigationBar","properties","state","brandName","routes","id","href","label","icon","collapseStyle","toggleCollapse","defaultDetails","className","onClick","this","bind","type","style","data-toggle","data-target","toggled","setState","getMenuLinks","getRoutes","map","route","key","aria-hidden","to","render","Component","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"iPAqBqBA,E,oBAEnB,WAAmBC,GAAiB,aAElC,cAAMA,IAAN,MAEKC,MAAQ,CACXC,UAAW,wBACXC,OAAQ,CACN,CACEC,GAAI,OACJC,KAAM,IACNC,MAAO,OACPC,KAAM,eAER,CACEH,GAAI,UACJC,KAAM,YACNC,MAAO,UACPC,KAAM,sBAER,CACEH,GAAI,WACJC,KAAM,aACNC,MAAO,WACPC,KAAM,gBAER,CACEH,GAAI,QACJC,KAAM,UACNC,MAAO,QACPC,KAAM,iBAGVC,cAAe,CACb,QAAW,QAEbC,gBAAgB,GAnCgB,E,kHAuC5BC,eAAR,WACE,OACE,yBAAKC,UAAU,6BACb,4BACEC,QAASC,KAAKJ,eAAeK,KAAKD,KAAM,IACxCE,KAAK,SACLJ,UAAW,iBAAmBK,IAAM,yBACpCC,cAAY,WACZC,cAAY,+BACZ,0BAAMP,UAAU,WAAhB,qBAAkD,uBAAGA,UAAU,eANjE,SAQA,wBAAIA,UAAW,gBAAkBK,IAAM,yBAA0BH,KAAKZ,MAAMC,a,EAK1EO,eAAR,WAEE,IAAIU,GAAmB,EACnBX,EAAwB,CAC1B,QAAW,QAGPK,KAAKZ,MAAMQ,iBAEfU,GAAU,EACVX,EAAgB,CACd,QAAW,UAIf,IAAMP,EAAgB,OAAH,UAAOY,KAAKZ,OAE/BA,EAAK,cAAoBO,EACzBP,EAAK,eAAqBkB,EAE1BN,KAAKO,SAASnB,I,EAGRoB,aAAR,WACE,OACE,yBACEV,UAAW,4BAA8BK,IAAM,2BAC/CZ,GAAG,6BACHY,MAAOH,KAAKZ,MAAMO,eAClB,wBAAIG,UAAU,+BACXE,KAAKS,e,EAMNA,UAAR,WACE,OAAOT,KAAKZ,MAAME,OAAOoB,KAAI,SAACC,GAE5B,IAAMnB,EAAemB,EAAMnB,KAE3B,MAAiB,SAAbmB,EAAMpB,GAEN,wBAAIqB,IAAKD,EAAMpB,GAAIO,UAAU,eAC3B,uBAAGN,KAAMA,GACP,uBAAGM,UAAWa,EAAMjB,KAAMmB,cAAY,SADxC,IACqDF,EAAMlB,QAO/D,wBAAImB,IAAKD,EAAMpB,GAAIO,UAAU,eAC3B,kBAAC,IAAD,CAAMgB,GAAItB,GACR,uBAAGM,UAAWa,EAAMjB,KAAMmB,cAAY,SADxC,IACqDF,EAAMlB,Y,EAO5DsB,OAAP,WACE,OACE,yBAAKxB,GAAG,2BAA2BO,UAAWK,IAAK,WACjD,yBAAKL,UAAW,2BAA6BK,IAAM,mBACjD,yBAAKL,UAAU,aACZE,KAAKH,iBACLG,KAAKQ,mB,GA5HyBQ,c,kCCrB3C,iJAcyBC,QAAOC,QAELC,IAAMC,cAAc,K,qBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,wFCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"components-NavigationBar-NavigationBar-450021cf6dc439596dbf.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'gatsby';\n\nimport style from './NavigationBar.module.scss';\n\ninterface IProperty {}\n\ninterface IState {\n  brandName: string;\n  routes: IRoute[];\n  collapseStyle: object;\n  toggleCollapse: boolean;\n}\n\ninterface IRoute {\n  id: string;\n  href: string;\n  label: string;\n  icon: string;\n}\n\nexport default class NavigationBar extends Component<IProperty, IState> {\n\n  public constructor(properties: any) {\n\n    super(properties);\n    \n    this.state = {\n      brandName: 'JOSHUA CLIFFORD REYES',\n      routes: [\n        {\n          id: 'home',\n          href: '/',\n          label: 'HOME',\n          icon: 'fas fa-home',\n        },\n        {\n          id: 'contact',\n          href: '/contact/',\n          label: 'CONTACT',\n          icon: 'fas fa-paper-plane'\n        },\n        {\n          id: 'projects',\n          href: '/projects/',\n          label: 'PROJECTS',\n          icon: 'fas fa-magic'\n        },\n        {\n          id: 'tools',\n          href: '/tools/',\n          label: 'TOOLS',\n          icon: 'fas fa-heart'\n        },\n      ],\n      collapseStyle: {\n        'display': 'none'\n      },\n      toggleCollapse: false,\n    };\n  }\n\n  private defaultDetails(): JSX.Element {\n    return (\n      <div className=\"navbar-header page-scroll\">\n        <button \n          onClick={this.toggleCollapse.bind(this, '')} \n          type=\"button\" \n          className={'navbar-toggle ' + style['navigation-bar-toggle']} \n          data-toggle=\"collapse\" \n          data-target=\"#navigation-bar-collapsable\">\n          <span className=\"sr-only\">Toggle navigation</span><i className=\"fa fa-bars\"></i> MENU\n        </button>\n        <h1 className={'navbar-brand ' + style['navigation-bar-title']}>{this.state.brandName}</h1>\n      </div>\n    );\n  }\n\n  private toggleCollapse(): void {\n    \n    let toggled: boolean = false;\n    let collapseStyle: object = {\n      'display': 'none'\n    };\n    \n    if (! this.state.toggleCollapse) {\n      \n      toggled = true;\n      collapseStyle = {\n        'display': 'block'\n      };\n    }\n\n    const state: IState = {...this.state};\n\n    state['collapseStyle'] = collapseStyle;\n    state['toggleCollapse'] = toggled;\n\n    this.setState(state);\n  }\n\n  private getMenuLinks(): JSX.Element {\n    return (\n      <div \n        className={'collapse navbar-collapse ' + style['navigation-bar-collapse']} \n        id=\"navigation-bar-collapsable\" \n        style={this.state.collapseStyle}>\n        <ul className=\"nav navbar-nav navbar-right\">\n          {this.getRoutes()}\n        </ul>\n      </div>\n    );\n  }\n\n  private getRoutes(): JSX.Element[] {\n    return this.state.routes.map((route: IRoute) => {\n\n      const href: string = route.href;\n\n      if (route.id === 'home') {\n        return (\n          <li key={route.id} className=\"page-scroll\">\n            <a href={href}>\n              <i className={route.icon} aria-hidden=\"true\"></i> {route.label}\n            </a>\n          </li>\n        );\n      }\n      \n      return (\n        <li key={route.id} className=\"page-scroll\">\n          <Link to={href}>\n            <i className={route.icon} aria-hidden=\"true\"></i> {route.label}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div id=\"navigation-bar-component\" className={style['container']}>\n        <nav className={'navbar navbar-fixed-top ' + style['navigation-bar']}>\n          <div className=\"container\">\n            {this.defaultDetails()}\n            {this.getMenuLinks()}\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}