{"version":3,"sources":["webpack:///./src/components/ContactForm/ContactForm.tsx","webpack:///./src/components/Loader/Loader.tsx"],"names":["ContactForm","properties","state","contact","name","email","message","webVersion","loader","onSubmitFormHandler","this","triggerLoader","fetch","API_CONTACT","method","headers","body","JSON","stringify","then","response","status","alert","window","location","reload","json","data","console","error","visiblity","setState","handleFieldChange","key","event","target","value","render","id","className","style","visibility","onChange","bind","type","placeholder","onClick","Component","Loader","loaderClasses","props"],"mappings":"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","file":"components-ContactForm-ContactForm-c21405225c1e47a6c2da.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Loader from '../Loader/Loader';\n\nimport style from './ContactForm.module.scss';\n\ninterface IProperty {}\n\ninterface IState {\n  contact: IContact\n  loader: boolean;\n}\n\ninterface IContact {\n  name: string;\n  email: string;\n  message: string;\n  webVersion: string;\n}\n\nexport default class ContactForm extends Component<IProperty, IState> {\n\n  private static readonly API_CONTACT: string = 'https://lorddashme-github-io-backend.herokuapp.com/contact';\n\n  public constructor(properties: any) {\n    \n    super(properties);\n\n    this.state = {\n      contact: {\n        name: '',\n        email: '',\n        message: '',\n        webVersion: 'v2'\n      },\n      loader: false\n    };\n  }\n\n  private onSubmitFormHandler(): void {\n    \n    if (\n      (typeof this.state.contact.name === 'undefined' || this.state.contact.name === '') ||\n      (typeof this.state.contact.email === 'undefined' || this.state.contact.email === '') ||\n      (typeof this.state.contact.message === 'undefined' || this.state.contact.message === '')\n    ) {\n      alert('Please fill-up first all the required fields.');\n      return;\n    }\n\n    this.triggerLoader(true);\n\n    fetch(\n      ContactForm.API_CONTACT, \n      {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type':'application/json', \n          'X-LORDDASHME-HEADER': '1'\n        },\n        body: JSON.stringify(this.state.contact)\n      }\n    ).then((response) => {\n\n      if (response.status === 200) {\n        this.triggerLoader(false);\n        alert('Message sent!');\n        window.location.reload();\n        return;\n      }\n\n      response.json().then((data) => {\n        this.triggerLoader(false);\n        alert(data.message);\n        console.error(data.message);\n      });\n    });\n  }\n\n  private triggerLoader(visiblity: boolean): void {\n\n    const state: IState = {...this.state};\n    \n    state['loader'] = visiblity;\n    \n    this.setState(state);\n  }\n\n  private handleFieldChange(key: string, event: any): void {\n    \n    let contact: IContact = this.state.contact;\n    \n    if (key === 'name') {\n      contact['name'] = event.target.value;\n    }\n    if (key === 'email') {\n      contact['email'] = event.target.value;\n    }\n    if (key === 'message') {\n      contact['message'] = event.target.value;\n    }\n\n    const state: IState = {...this.state};\n    \n    state['contact'] = contact;\n\n    this.setState(state);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div id=\"contact-form-component\" className={style['container']}>\n        <Loader visibility={this.state.loader}/>\n        <form className={style['form']}>\n          <div className={style['field'] + ' form-group'}>\n            <label className={style['label']}>NAME*</label>\n            <input value={this.state.contact.name} onChange={this.handleFieldChange.bind(this, 'name')} className={style['control'] + ' form-control'} type=\"text\" placeholder=\"John Doe\" />\n          </div>\n          <div className={style['field'] + ' form-group'}>\n            <label className={style['label']}>EMAIL*</label>\n            <input value={this.state.contact.email} onChange={this.handleFieldChange.bind(this, 'email')} className={style['control'] + ' form-control'} type=\"text\" placeholder=\"john.doe@example.com\" />\n          </div>\n          <div className={style['field'] + ' form-group'}>\n            <label className={style['label']}>MESSAGE*</label>\n            <textarea value={this.state.contact.message} onChange={this.handleFieldChange.bind(this, 'message')} className={style['textarea'] + ' ' + style['control'] + ' form-control'} placeholder=\"Say something...\"></textarea>\n          </div>\n          <button className={style['button'] + ' btn'} type=\"button\" onClick={this.onSubmitFormHandler.bind(this)}><b>SEND</b></button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport style from './Loader.module.scss';\n\ninterface IProperty {\n  visibility: boolean;\n}\n\ninterface IState {}\n\nexport default class Loader extends Component<IProperty, IState> {\n\n  public render(): JSX.Element {\n\n    let loaderClasses: string = style['signal-wrapper'];\n    \n    if (! this.props.visibility) {\n      loaderClasses += ' ' + style['off'];\n    }\n\n    return (\n      <div id=\"loader-component\" className={style['container']}>\n        <div className={loaderClasses}>\n          <div className={style['signal']}></div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}