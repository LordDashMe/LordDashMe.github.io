{"version":3,"sources":["webpack:///./src/components/Analytics/GoogleGlobalSiteTag/GoogleGlobalSiteTag.tsx","webpack:///./src/common/helper.tsx"],"names":["GoogleGlobalSiteTag","componentDidMount","isSSR","this","initializeVendor","initializePageView","window","dataLayer","script","document","createElement","type","src","props","trackingId","body","appendChild","console","log","gtag","push","arguments","Date","location","pathname","info","setTimeout","bind","PAUSE_TIME","render","Component","themeConstant","LIGHT","DARK","loadableFallbackTemplate","targetComponentElementFallback","querySelector","key","toString","dangerouslySetInnerHTML","__html","outerHTML","lazyLoadBottomPageTrigger","state","callback","newState","handleScroll","waitingTime","Error","timeout","args","context","clearTimeout","apply","debounce","innerHeight","scrollY","offsetHeight","isAtTheBottomPage","totalItems","items","length","x","isDone","addEventListener","unsubscribe","removeEventListener"],"mappings":"yMAiBqBA,E,wLAIZC,kBAAP,WACOC,gBACHC,KAAKC,mBACLD,KAAKE,uB,EAIDD,iBAAR,WACE,IAAKE,OAAOC,UAAW,CACrB,IAAMC,EAAcC,SAASC,cAAc,UAC3CF,EAAOG,KAAO,kBACdH,EAAOI,IAAM,+CAAiDT,KAAKU,MAAMC,WACzEL,SAASM,KAAKC,YAAYR,GAC1BS,QAAQC,IAAI,6F,EAIRb,mBAAR,gBACkC,IAArBC,OAAOC,WAA6BD,OAAOC,WACpDU,QAAQC,IAAI,kFAKZZ,OAAOa,KAAO,WAAcb,OAAOC,UAAUa,KAAKC,YAClDf,OAAOa,KAAK,KAAM,IAAIG,MACtBhB,OAAOa,KAAK,SAAUhB,KAAKU,MAAMC,WAAY,CAC3C,gBAAkB,EAClB,UAAaR,OAAOG,SAASc,SAASC,aAGxCP,QAAQQ,KAAR,sGAGAC,WAAWvB,KAAKE,mBAAmBsB,KAAKxB,MAAOH,EAAoB4B,c,EAIhEC,OAAP,WAAwB,OAAO,M,GA1CgBC,aAA5B9B,EAEK4B,WAAqB,K,iOCQlC1B,EAAQ,iBAAiC,oBAAXI,QAoB9ByB,EAAgB,CAC3BC,MAAO,QACPC,KAAM,QAwBKC,EAA2B,SAACC,GAEvC,OAAKjC,KAAWO,SAAS2B,cAAcD,GAEnC,yBACEE,IAAKF,EAA+BG,WACpCC,wBAAyB,CAACC,OAAQ/B,SAAS2B,cAAcD,GAAgCM,aAKxF,MA4EIC,EAA4B,SAACC,EAAYC,GAEpD,IAAMC,EAAW,OAAH,UAAOF,GAEfG,EApEgB,SAACF,EAAoBG,GAE3C,QAF4E,IAAjCA,MAAsB,GAEzC,mBAAbH,EACP,MAAMI,MAAM,8CAGhB,GAA2B,iBAAhBD,EACP,MAAMC,MAAM,4CAGhB,IAAIC,EAAU,KAEd,OAAO,WAAkB,2BAAdC,EAAc,yBAAdA,EAAc,gBAEvB,IAAIC,O,EAEJC,aAAaH,GAEbA,EAAUvB,YAAW,WACjBuB,EAAU,KACVL,EAASS,MAAMF,EAASD,KACzBH,IA+CgBO,EAAS,YAjBC,SAACV,GAE3BtC,OAAOiD,YAAcjD,OAAOkD,QAAU,KAAS/C,SAASM,KAAK0C,cAAgBb,IAiBhFc,EAAkB,WAIhB,IAFA,IAAMC,EAAad,EAASe,MAAMC,OAAS,EAElCC,EAAI,EAAGA,GAAKH,EAAYG,IAC/B,IAAKjB,EAASe,MAAME,GAAI,CACtBjB,EAASe,MAAME,IAAK,EACpB,MAIAjB,EAASe,MAAMD,KACjBd,EAAQ,QAAa,GAGvBD,EAASC,QAIV,KAMH,OAJKA,EAASkB,QACZzD,OAAO0D,iBAAiB,SAAUlB,GAG7B,CACLH,MAAOA,EACPsB,YAAa,WAAQ3D,OAAO4D,oBAAoB,SAAUpB","file":"components-Analytics-GoogleGlobalSiteTag-GoogleGlobalSiteTag-8079a6d4a14be226235c.js","sourcesContent":["import { Component } from 'react';\n\nimport { isSSR } from '../../../common/helper';\n\ndeclare global {\n  interface Window {\n    dataLayer: any;\n    gtag: any;\n  }\n}\n\ninterface IProperty {\n  trackingId: string;\n}\n\ninterface IState {}\n\nexport default class GoogleGlobalSiteTag extends Component<IProperty, IState> {\n\n  private static readonly PAUSE_TIME: number = 1000; // 1000ms 1s\n\n  public componentDidMount(): void {\n    if (!isSSR()) {\n      this.initializeVendor();\n      this.initializePageView();\n    }\n  }\n\n  private initializeVendor(): void {\n    if (!window.dataLayer) {\n      const script: any = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = 'https://www.googletagmanager.com/gtag/js?id=' + this.props.trackingId;\n      document.body.appendChild(script);\n      console.log('[LDM] Analytics_GoogleGlobalSiteTag_GoogleGlobalSiteTagComponent: has been initialized.');\n    } \n  }\n\n  private initializePageView(): void {\n    if (typeof window.dataLayer !== 'undefined' && window.dataLayer) {\n      console.log('[LDM] Analytics_GoogleGlobalSiteTag_GoogleGlobalSiteTagComponent: GA detected!');\n      // Reference: \n      //  - https://developers.google.com/analytics/devguides/collection/gtagjs\n      //  - https://developers.google.com/analytics/devguides/collection/gtagjs/pages\n      //  - https://developers.google.com/analytics/devguides/collection/gtagjs/migration\n      window.gtag = function () { window.dataLayer.push(arguments); };\n      window.gtag('js', new Date());\n      window.gtag('config', this.props.trackingId, { \n        'send_page_view': true,\n        'page_path': window.document.location.pathname\n      });\n    } else {\n      console.info(`[LDM] Analytics_GoogleGlobalSiteTag_GoogleGlobalSiteTagComponent: Waiting for GA to load properly.`);\n      // We used setTimeout in order to have a pause time \n      // before calling again the initializePageView.\n      setTimeout(this.initializePageView.bind(this), GoogleGlobalSiteTag.PAUSE_TIME);\n    } \n  }\n\n  public render(): null { return null; }\n}\n","/*\n * This file is part of the lorddashme.github.io v3.\n *\n * (c) Joshua Clifford Reyes <reyesjoshuaclifford@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport React from 'react';\n\n/**\n * Helper File.\n * \n * All common functions are registered here.\n * \n * @author Joshua Clifford Reyes <reyesjoshuaclifford@gmail.com>\n */\n\n/**\n * Is SSR Checker Function.\n * \n * Primary used to skip some code blocks when the SSR rendering executed\n * upon gatsby building process.\n * \n * @return {Boolean}\n */\nexport const isSSR = (): boolean => typeof window === 'undefined';\n\n/**\n * Is Mobile Checker Function.\n * \n * Use to change state when the width detected match the size of the mobile.\n * Tablet and Mobile size is considered as mobile.\n * \n * @return {Boolean}\n */\nexport const isMobile = (): boolean => (window.screen.width <= 1023);\n\n/**\n * Theme Constant\n * \n * Basically this is used to unified some of the property to be use.\n * \n * The same implementation of this will be see on the \"gatsby-ssr.js\"\n * to avoid any inconsistent condition for theme.\n */\nexport const themeConstant = {\n  LIGHT: 'light',\n  DARK: 'dark'\n};\n\n/**\n * Theme Global Properties.\n * \n * Access one of this property to interact with the theme process.\n */\ndeclare global {\n  interface Window {\n    __themeConstant: any;\n    __theme: any;\n    __setTheme: Function;\n  }\n};\n\n/**\n * Loadable Plugin Fallback Template for Lazy Loaded Component.\n * \n * @param {String} targetComponentElementFallback The target element definition to be pass on \n *                                                querySelector that will be use as the callback template.\n * \n * @return {JSX.Element|null}\n */\nexport const loadableFallbackTemplate = (targetComponentElementFallback: string): JSX.Element|null => {\n  \n  if (!isSSR() && document.querySelector(targetComponentElementFallback)) {\n    return (\n      <div \n        key={targetComponentElementFallback.toString()} \n        dangerouslySetInnerHTML={{__html: document.querySelector(targetComponentElementFallback).outerHTML}}>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * The code snippet for Debounce Strategy.\n *\n * @param {Function} callback    The callback function that will be debouce.\n * @param {Number}   waitingTime The (N) milliseconds that the callback function  \n *                               will be call after no call action made.\n *\n * @return {*}\n */\nexport const debounce = (callback: Function, waitingTime: number = 0): any => {\n\n  if (typeof callback !== 'function') {\n      throw Error('The first argument is not a type function.');\n  }\n\n  if (typeof waitingTime !== 'number') {\n      throw Error('The second argument is not a type number');\n  }\n\n  let timeout = null;\n\n  return (...args: any) => {\n\n    let context = this;\n\n    clearTimeout(timeout);\n\n    timeout = setTimeout(function() {\n        timeout = null;\n        callback.apply(context, args);\n    }, waitingTime);\n  };\n};\n\n/**\n * The common function for checking the element if visible on the browser viewport.\n * \n * @param {HTMLElement} element The selected element instance.\n * \n * @return {Boolean}\n */\nexport const isElementInViewport = (element: HTMLElement): boolean => {\n\n  const rect = element.getBoundingClientRect();\n\n  return (\n    Math.floor(rect.top) >= 0 &&\n    Math.floor(rect.left) >= 0 &&\n    Math.floor(rect.bottom) <= (window.innerHeight || document.documentElement.clientHeight) &&\n    Math.floor(rect.right) <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n};\n\n/**\n * The common function for checking if the current view is at the bottom page.\n * \n * @param {Function} callback The callback function that will be when the condition is true.\n * \n * @return {VoidFunction}\n */\nexport const isAtTheBottomPage = (callback: Function): void => {\n  // An additional 1000 pixels so that we can execute the callback in advance.\n  if ((window.innerHeight + window.scrollY + 1000) >= document.body.offsetHeight) { callback(); }\n};\n\n/**\n * The common function for lazy loading component bottom page trigger.\n * \n * @param {*}        state    The state of the current Page/Component. \n * @param {Function} callback The callback function that will be when the condition is true.\n * \n * @return {*}\n */\nexport const lazyLoadBottomPageTrigger = (state: any, callback: Function): any => {\n\n  const newState = {...state};\n\n  const handleScroll = debounce(() => {\n\n    isAtTheBottomPage(() => {\n\n      const totalItems = newState.items.length - 1;\n      \n      for (let x = 0; x <= totalItems; x++) {\n        if (!newState.items[x]) {\n          newState.items[x] = true;\n          break;\n        }\n      }\n\n      if (newState.items[totalItems]) {\n        newState['isDone'] = true;\n      }\n\n      callback(newState);\n      \n    });\n\n  }, 300);\n\n  if (!newState.isDone) {\n    window.addEventListener('scroll', handleScroll);\n  }\n\n  return {\n    state: state,\n    unsubscribe: () => { window.removeEventListener('scroll', handleScroll); }\n  };\n};\n"],"sourceRoot":""}