{"version":3,"sources":["webpack:///./src/common/helper.tsx","webpack:///./src/components/Analytics/GoogleAnalytics/GoogleAnalytics.tsx"],"names":["isSSR","window","loadableFallbackTemplate","targetComponentElementFallback","document","querySelector","key","toString","dangerouslySetInnerHTML","__html","outerHTML","lazyLoadBottomPageTrigger","state","callback","newState","handleScroll","waitingTime","Error","timeout","args","context","clearTimeout","setTimeout","apply","debounce","innerHeight","scrollY","body","offsetHeight","isAtTheBottomPage","totalItems","items","length","x","isDone","addEventListener","unsubscribe","removeEventListener","GoogleAnalytics","componentDidMount","this","initializeVendor","initializePageView","ga","script","createElement","type","src","appendChild","console","log","props","trackingId","location","pathname","info","bind","PAUSE_TIME","render","Component"],"mappings":"qRA2BaA,EAAQ,iBAAiC,oBAAXC,QAoB9BC,EAA2B,SAACC,GAEvC,OAAKH,KAAWI,SAASC,cAAcF,GAEnC,yBACEG,IAAKH,EAA+BI,WACpCC,wBAAyB,CAACC,OAAQL,SAASC,cAAcF,GAAgCO,aAKxF,MA4EIC,EAA4B,SAACC,EAAYC,GAEpD,IAAMC,EAAW,OAAH,UAAOF,GAEfG,EApEgB,SAACF,EAAoBG,GAE3C,QAF4E,IAAjCA,MAAsB,GAEzC,mBAAbH,EACP,MAAMI,MAAM,8CAGhB,GAA2B,iBAAhBD,EACP,MAAMC,MAAM,4CAGhB,IAAIC,EAAU,KAEd,OAAO,WAAkB,2BAAdC,EAAc,yBAAdA,EAAc,gBAEvB,IAAIC,O,EAEJC,aAAaH,GAEbA,EAAUI,YAAW,WACjBJ,EAAU,KACVL,EAASU,MAAMH,EAASD,KACzBH,IA+CgBQ,EAAS,YAjBC,SAACX,GAE3BZ,OAAOwB,YAAcxB,OAAOyB,QAAU,KAAQtB,SAASuB,KAAKC,cAAgBf,IAiB/EgB,EAAkB,WAIhB,IAFA,IAAMC,EAAahB,EAASiB,MAAMC,OAAS,EAElCC,EAAI,EAAGA,GAAKH,EAAYG,IAC/B,IAAKnB,EAASiB,MAAME,GAAI,CACtBnB,EAASiB,MAAME,IAAK,EACpB,MAIAnB,EAASiB,MAAMD,KACjBhB,EAAQ,QAAa,GAGvBD,EAASC,QAIV,KAMH,OAJKA,EAASoB,QACZjC,OAAOkC,iBAAiB,SAAUpB,GAG7B,CACLH,MAAOA,EACPwB,YAAa,WAAQnC,OAAOoC,oBAAoB,SAAUtB,O,iHCvJzCuB,E,wLAIZC,kBAAP,WACOvC,gBACHwC,KAAKC,mBACLD,KAAKE,uB,EAIDD,iBAAR,WACE,IAAKxC,OAAO0C,GAAI,CACd,IAAMC,EAAcxC,SAASyC,cAAc,UAC3CD,EAAOE,KAAO,kBACdF,EAAOG,IAAM,+CACb3C,SAASuB,KAAKqB,YAAYJ,GAC1BK,QAAQC,IAAI,qF,EAIRR,mBAAR,gBAC2B,IAAdzC,OAAO0C,IAAsB1C,OAAO0C,IAC7CM,QAAQC,IAAI,0EACZjD,OAAO0C,GAAG,SAAUH,KAAKW,MAAMC,WAAY,QAC3CnD,OAAO0C,GAAG,OAAQ,WAAY1C,OAAOoD,SAASC,YAE9CL,QAAQM,KAAR,8FAGAjC,WAAWkB,KAAKE,mBAAmBc,KAAKhB,MAAOF,EAAgBmB,c,EAI5DC,OAAP,WAAwB,OAAO,M,GAlCYC,aAAxBrB,EAEKmB,WAAqB","file":"components-Analytics-GoogleAnalytics-GoogleAnalytics-3954e40fc181b4691bfa.js","sourcesContent":["/*\n * This file is part of the lorddashme.github.io v3.\n *\n * (c) Joshua Clifford Reyes <reyesjoshuaclifford@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport React from 'react';\n\n/**\n * Helper File.\n * \n * All common functions are registered here.\n * \n * @author Joshua Clifford Reyes <reyesjoshuaclifford@gmail.com>\n */\n\n/**\n * Is SSR Checker Function.\n * \n * Primary used to skip some code blocks when the SSR rendering executed\n * upon gatsby building process.\n * \n * @return {Boolean}\n */\nexport const isSSR = (): boolean => typeof window === 'undefined';\n\n/**\n * Is Mobile Checker Function.\n * \n * Use to change state when the width detected match the size of the mobile.\n * Tablet and Mobile size is considered as mobile.\n * \n * @return {Boolean}\n */\nexport const isMobile = (): boolean => (window.screen.width <= 1023);\n\n/**\n * Loadable Plugin Fallback Template for Lazy Loaded Component.\n * \n * @param {String} targetComponentElementFallback The target element definition to be pass on \n *                                                querySelector that will be use as the callback template.\n * \n * @return {JSX.Element|null}\n */\nexport const loadableFallbackTemplate = (targetComponentElementFallback: string): JSX.Element|null => {\n  \n  if (!isSSR() && document.querySelector(targetComponentElementFallback)) {\n    return (\n      <div \n        key={targetComponentElementFallback.toString()} \n        dangerouslySetInnerHTML={{__html: document.querySelector(targetComponentElementFallback).outerHTML}}>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n/**\n * The code snippet for Debounce Strategy.\n *\n * @param {Function} callback    The callback function that will be debouce.\n * @param {Number}   waitingTime The (N) milliseconds that the callback function  \n *                               will be call after no call action made.\n *\n * @return {*}\n */\nexport const debounce = (callback: Function, waitingTime: number = 0): any => {\n\n  if (typeof callback !== 'function') {\n      throw Error('The first argument is not a type function.');\n  }\n\n  if (typeof waitingTime !== 'number') {\n      throw Error('The second argument is not a type number');\n  }\n\n  let timeout = null;\n\n  return (...args: any) => {\n\n    let context = this;\n\n    clearTimeout(timeout);\n\n    timeout = setTimeout(function() {\n        timeout = null;\n        callback.apply(context, args);\n    }, waitingTime);\n  };\n};\n\n/**\n * The common function for checking the element if visible on the browser viewport.\n * \n * @param {HTMLElement} element The selected element instance.\n * \n * @return {Boolean}\n */\nexport const isElementInViewport = (element: HTMLElement): boolean => {\n\n  const rect = element.getBoundingClientRect();\n\n  return (\n    Math.floor(rect.top) >= 0 &&\n    Math.floor(rect.left) >= 0 &&\n    Math.floor(rect.bottom) <= (window.innerHeight || document.documentElement.clientHeight) &&\n    Math.floor(rect.right) <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n};\n\n/**\n * The common function for checking if the current view is at the bottom page.\n * \n * @param {Function} callback The callback function that will be when the condition is true.\n * \n * @return {VoidFunction}\n */\nexport const isAtTheBottomPage = (callback: Function): void => {\n  // An additional 500 pixels so that we can execute the callback in advance.\n  if ((window.innerHeight + window.scrollY + 500) >= document.body.offsetHeight) { callback(); }\n};\n\n/**\n * The common function for lazy loading component bottom page trigger.\n * \n * @param {*}        state    The state of the current Page/Component. \n * @param {Function} callback The callback function that will be when the condition is true.\n * \n * @return {*}\n */\nexport const lazyLoadBottomPageTrigger = (state: any, callback: Function): any => {\n\n  const newState = {...state};\n\n  const handleScroll = debounce(() => {\n\n    isAtTheBottomPage(() => {\n\n      const totalItems = newState.items.length - 1;\n      \n      for (let x = 0; x <= totalItems; x++) {\n        if (!newState.items[x]) {\n          newState.items[x] = true;\n          break;\n        }\n      }\n\n      if (newState.items[totalItems]) {\n        newState['isDone'] = true;\n      }\n\n      callback(newState);\n      \n    });\n\n  }, 300);\n\n  if (!newState.isDone) {\n    window.addEventListener('scroll', handleScroll);\n  }\n\n  return {\n    state: state,\n    unsubscribe: () => { window.removeEventListener('scroll', handleScroll); }\n  };\n};\n","import { Component } from 'react';\n\nimport { isSSR } from '../../../common/helper';\n\ndeclare global {\n  interface Window {\n    ga: any;\n  }\n}\n\ninterface IProperty {\n  trackingId: string;\n}\n\ninterface IState {}\n\nexport default class GoogleAnalytics extends Component<IProperty, IState> {\n\n  private static readonly PAUSE_TIME: number = 1000; // 1000ms 1s\n\n  public componentDidMount(): void {\n    if (!isSSR()) {\n      this.initializeVendor();\n      this.initializePageView();\n    }\n  }\n\n  private initializeVendor(): void {\n    if (!window.ga) {\n      const script: any = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = '/resources/vendor/google-analytics/ga.min.js';\n      document.body.appendChild(script);\n      console.log('[LDM] Analytics_GoogleAnalytics_GoogleAnalyticsComponent: has been initialized.');\n    } \n  }\n\n  private initializePageView(): void {\n    if (typeof window.ga !== 'undefined' && window.ga) {\n      console.log('[LDM] Analytics_GoogleAnalytics_GoogleAnalyticsComponent: GA detected!');\n      window.ga('create', this.props.trackingId, 'auto');\n      window.ga('send', 'pageview', window.location.pathname);\n    } else {\n      console.info(`[LDM] Analytics_GoogleAnalytics_GoogleAnalyticsComponent: Waiting for GA to load properly.`);\n      // We used setTimeout in order to have a pause time \n      // before calling again the initializePageView.\n      setTimeout(this.initializePageView.bind(this), GoogleAnalytics.PAUSE_TIME);\n    } \n  }\n\n  public render(): null { return null; }\n}\n"],"sourceRoot":""}