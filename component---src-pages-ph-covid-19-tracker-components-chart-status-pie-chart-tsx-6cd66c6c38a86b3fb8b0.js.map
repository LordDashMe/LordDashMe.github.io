{"version":3,"sources":["webpack:///./src/pages/ph-covid19-tracker/components/Chart/StatusPieChart.tsx"],"names":["ReactChartJS2","loadable","fallback","StatusPieChart","properties","state","statusPieChart","data","getStatusPieChartData","options","getStatusPieChartOptions","totalConfirmedCases","percentageVisibility","percentageValue","componentDidMount","isSSR","this","fetchProjectsOnFireStore","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBorderColor","hoverBorderWidth","maintainAspectRatio","legend","display","boxWidth","fontSize","fontColor","fontFamily","tooltips","bodyFontFamily","custom","tooltip","opacity","unsetPercentageValue","onClick","chartEvent","chartState","_index","setPercentageValue","onHover","currentState","setState","specificIndex","specificCaseCount","parseFloat","toFixed","Firestore","clearInstance","initialize","getInstance","collection","orderBy","get","then","querySnapshot","docs","count","statusOverview","filter","doc","sys_id","map","document","id","sysId","color","details","getPercentage","className","style","render","type","width","height","Component"],"mappings":"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","file":"component---src-pages-ph-covid-19-tracker-components-chart-status-pie-chart-tsx-6cd66c6c38a86b3fb8b0.js","sourcesContent":["import React, { Component } from 'react';\nimport loadable from '@loadable/component';\n\nimport { isSSR } from '../../../../common/helper';\n\nimport Firestore from '../../../../components/Database/Firebase/Firestore';\n\nconst ReactChartJS2 = loadable(() => import('react-chartjs-2'), { fallback: null });\n\nimport style from './StatusPieChart.module.scss';\n\ninterface IProperty {}\n\ninterface IState {\n  statusPieChart: IStatusPieChart;\n  totalConfirmedCases: number;\n  percentageVisibility: boolean;\n  percentageValue: number;\n};\n\ninterface IStatusPieChart {\n  data: object;\n  options: object;\n}\n\ninterface IStatusOverview {\n  id: string;\n  sysId: string;\n  label: string;\n  count: number;\n  color: string;\n}\n\nexport default class StatusPieChart extends Component<IProperty, IState> {\n\n  public constructor(properties: any) {\n    \n    super(properties);\n\n    this.state = {\n      statusPieChart: {\n        data: this.getStatusPieChartData(),\n        options: this.getStatusPieChartOptions()\n      },\n      totalConfirmedCases: 0,\n      percentageVisibility: false,\n      percentageValue: 0,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (! isSSR()) {\n      this.fetchProjectsOnFireStore(); \n    }\n  }\n\n  private getStatusPieChartData(): object {\n    return {\n      labels: [\n        'ACTIVE CASES',\n        'RECOVERED',\n        'DEATHS'\n      ],\n      datasets: [\n        {\n          label: 'COVID-19',\n          data: [\n            0,\n            10,\n            0\n          ],\n          backgroundColor: [\n            '#e29e01',\n            '#60a138',\n            '#a13838'\n          ],\n          borderColor: '#fff',\n          borderWidth: 0,\n          hoverBorderColor: [\n            '#fff',\n            '#fff',\n            '#fff'\n          ],\n          hoverBorderWidth: 0\n        }\n      ]\n    };\n  }\n\n  private getStatusPieChartOptions(): object {\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n        labels: {\n          boxWidth: 16,\n          fontSize: 14,\n          fontColor: '#000',\n          fontFamily: 'Montserrat, \"Helvetica Neue\", Helvetica, Arial, sans-serif'\n        }\n      },\n      tooltips: {\n        bodyFontFamily: 'Montserrat, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n        custom: (tooltip: any): void => {\n          if (tooltip.opacity <= 0) {\n            this.unsetPercentageValue();\n          }\n        }\n      },\n      onClick: (chartEvent: any, chartState: any): void => {\n        if (!chartState || typeof chartState[0] === 'undefined' || !chartState[0]) {\n          return;\n        }\n        if (typeof chartState[0]._index !== 'undefined') {\n          this.setPercentageValue(chartState[0]._index);\n        }\n      },\n      onHover: (chartEvent: any, chartState: any): void => {\n        if (!chartState || typeof chartState[0] === 'undefined' || !chartState[0]) {\n          return;\n        }\n        if (typeof chartState[0]._index !== 'undefined') {\n          this.setPercentageValue(chartState[0]._index);\n        }\n      }\n    };\n  }\n\n  private unsetPercentageValue(): void {\n\n    const currentState: IState = {...this.state};\n\n    currentState.percentageVisibility = false;\n    currentState.percentageValue = 0;\n\n    this.setState(currentState);\n  }\n\n  private setPercentageValue(specificIndex: number): void {\n\n    const currentState: IState = {...this.state};\n    const specificCaseCount: any = currentState.statusPieChart.data['datasets'][0].data[specificIndex];\n\n    currentState.percentageVisibility = true;\n    currentState.percentageValue = parseFloat(((specificCaseCount / currentState.totalConfirmedCases) * 100).toFixed(2));\n\n    this.setState(currentState);\n  }\n\n  private fetchProjectsOnFireStore(): void {\n    \n    Firestore.clearInstance();\n    Firestore.initialize();\n    Firestore.getInstance()\n      .collection('ph-covid19-tracker-status-overview')\n      .orderBy('order', 'desc')\n      .get()\n      .then((querySnapshot: any): void => { \n\n        const totalConfirmedCases: any = querySnapshot.docs[0].data().count;\n        \n        const statusOverview: any = (querySnapshot.docs)\n          .filter((doc: any): IStatusOverview | boolean => {\n            \n            const document: any = doc.data();\n            \n            if (document.sys_id === 'confirmed_cases') {\n              return false;\n            } \n\n            return doc;\n            \n          }).map((doc: any): IStatusOverview => {\n            \n            const document: any = doc.data();\n            \n            return {\n              id: doc.id,\n              sysId: document.sys_id,\n              label: document.label,\n              count: document.count,\n              color: document.color\n            };\n          });\n\n        const currentState: IState = {...this.state};\n\n        currentState.statusPieChart.data['labels'] = statusOverview.map((details: IStatusOverview): string => {\n          return details.label;\n        });\n\n        currentState.statusPieChart.data['datasets'][0]['data'] = statusOverview.map((details: IStatusOverview): number => {\n          return details.count; \n        });\n\n        currentState.statusPieChart.data['datasets'][0]['backgroundColor'] = statusOverview.map((details: IStatusOverview): string => {\n          return details.color;\n        });\n\n        currentState.totalConfirmedCases = totalConfirmedCases;\n        \n        this.setState(currentState);\n      });\n  }\n\n  private getPercentage(): JSX.Element {\n    \n    if (this.state.percentageVisibility) {\n      return (\n        <div className={style['percentage-wrapper']}>\n          <div className={style['percentage']}><span id=\"percentage-value\">{this.state.percentageValue}</span>%</div>\n        </div>\n      );\n    }\n\n    return (<div></div>);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div id=\"ph-covid19-tracker-chart-status-pie-chart-component\" className={style['container']}>\n        {this.getPercentage()}\n        <ReactChartJS2 data={this.state.statusPieChart.data} options={this.state.statusPieChart.options} type={'pie'} width={300} height={300} />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}